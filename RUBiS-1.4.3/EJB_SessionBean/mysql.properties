###################### PostgreSQL DataSource configuration example
#


#####
#  DataSource configuration
#
datasource.name         mysql
datasource.url          jdbc:mysql://localhost/rubis?relaxAutocommit=true
datasource.classname    org.gjt.mm.mysql.Driver
datasource.username     margueri
datasource.password     


#####
#  ConnectionManager configuration
#

#  JDBC connection checking level.
#     0 = no special checking
#     1 = check physical connection is still open before reusing it
#     2 = try every connection before reusing it
jdbc.connchecklevel	1

#  Max age for jdbc connections
#     nb of minutes a connection can be kept in the pool
jdbc.connmaxage		30

#  Max concurrent threads on same tx/connection
#  (not used with a customized jdbc datasource)
jdbc.connmaxthreads	4

#  Max wait time if more than connmaxthreads threads request conn
#     value is in seconds
#  (not used with a customized jdbc datasource)
jdbc.connexcltimeout	30

#  Test statement
jdbc.connteststmt	select 1


######
#  Customizing JDBC DataSource configuration
#

#  Name of the class implementing the XADataSource
#datasource.factory	org.objectweb.jonas.dbm.JonasStandardXADataSource

#  JNDI name use to bind the XADataSource
#datasource.xadataname	postgre1_xa

#  Minimum number of physical connection used by  the XADataSource
#datasource.mincon	5

#  Maximum number of physical connection used by the XADataSource
#datasource.maxcon	10

#  Minimum number of XAConnection used by the pool
#jdbc.minconpool	10

#  Maximum number of XAConnection used by the pool
#jdbc.maxconpool	20

#  Time between two clean-up of old unused connection
#  (value is in millisecond)
#jdbc.sleeptimepool	300000

#  Force the gc to be launched when cleaning up
#jdbc.gcpool		false

#  In case of no connection in the pool,
#  deadlockpool is the global time to re-try before throwing an exception
#  (value is in millisecond)
#jdbc.deadlockpool	300000

#  In case of no connection in the pool,
#  loopwaitpool is the unit time to re-try
#  (value is in millisecond)
#jdbc.loopwaitpool	10000


